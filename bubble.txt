#include<bits/stdc++.h>
using namespace std;
using namespace std::chrono;

void s_bubble(int arr[], int n)
{
    for(int i=0;i<n-1;i++)
    {
        for(int j=0;j<n-i-1;j++)
        {
            if(arr[j]>arr[j+1])
            {
                swap(arr[j],arr[j+1]);
            }
        }
    }
    for(int i=0;i<n;i++)
    {
        cout<<arr[i]<<" ";
    }
}
void p_bubble(int arr[], int n)
{
    for(int i=0;i<n-1;i++)
    {
        #pragma omp parallel for
        for(int j=0;j<n-i-1;j++)
        {
            if(arr[j]>arr[j+1])
            {
                swap(arr[j],arr[j+1]);
            }
        }
    }
    for(int i=0;i<n;i++)
    {
        cout<<arr[i]<<" ";
    }
}
int main()
{
    int n;
    cout<<"enter no of elements : ";
    cin>>n;
    
    int arr_s[n];
    int arr_p[n];
    
    for(int i=0;i<n;i++)
    {
        cin>>arr_s[i];
        arr_p[i]=arr_s[i];
    }
    
    auto start=high_resolution_clock::now();
    s_bubble(arr_s,n);
    auto stop=high_resolution_clock::now();
    auto duration=duration_cast<nanoseconds>(stop-start);
    cout<<"seq time is : "<<duration.count()<<endl;
    
    auto start1=high_resolution_clock::now();
    #pragma omp parallel num_threads(4)
    {
        #pragma omp single
        {
            p_bubble(arr_p,n);
        }
    }
    auto stop1=high_resolution_clock::now();
    auto duration1=duration_cast<nanoseconds>(stop1-start1);
    cout<<"parallel time is : "<<duration1.count()<<endl;
}