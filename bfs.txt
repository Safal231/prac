#include<bits/stdc++.h>
using namespace std;
using namespace std::chrono;

int nodes;
int adj_matrix[20][20];
int visited_s[20];
int visited_p[20];

void s_bfs(int s)
{
    queue<int>q;
    q.push(s);
    visited_s[s]=1;
    
    while(!q.empty())
    {
        int n=q.front();
        cout<<n<<" ";
        q.pop();
        
        for(int i=0;i<nodes;i++)
        {
            if(adj_matrix[n][i] and !visited_s[i])
            {
                visited_s[i]=1;
                q.push(i);
            }
        }
    }
}
void p_bfs(int s)
{
    queue<int>q;
    q.push(s);
    visited_s[s]=1;


    while(!q.empty())
    {
        int n=q.front();
        q.pop();
        #pragma omp parallel for
        for(int i=0;i<nodes;i++)
        {
            if(adj_matrix[n][i] and !visited_s[i])
            {
                visited_s[i]=1;
                q.push(i);
            }
        }
    }
}
int main()
{
    cout<<"enter no of nodes : ";
    cin>>nodes;
    
    for(int i=0;i<nodes;i++)
    {
        for(int j=i;j<nodes;j++)
        {
            char edge;
            if(i==j)
            {
                adj_matrix[i][j]=0;
                continue;
            }
            cout<<"is there any edge from "<<i<<" to "<<j<<" (y/n)? ";
            cin>>edge;
            if(edge=='y')
            {
                adj_matrix[i][j]=1;
                adj_matrix[j][i]=1;
            }
            else if(edge=='n')
            {
                adj_matrix[i][j]=0;
                adj_matrix[j][i]=0;
            }
        }
    }
    auto start=high_resolution_clock::now();
    s_bfs(0);
    auto stop=high_resolution_clock::now();
    auto duration=duration_cast<nanoseconds>(stop-start);
    cout<<"\nseq time is : "<<duration.count();
    
    auto start1=high_resolution_clock::now();
    #pragma omp parallel num_threads(4)
    {
        #pragma omp single
        {
            p_bfs(0);
        }
    }
    auto stop1=high_resolution_clock::now();
    auto duration1=duration_cast<nanoseconds>(stop1-start1);
    cout<<"\nparallel time is : "<<duration1.count();
    
}